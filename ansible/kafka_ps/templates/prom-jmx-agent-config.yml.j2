---

lowercaseOutputName: true
rules:
  - pattern: kafka.cluster<type=(.+), name=(.+), topic=(.+), partition=(.+)><>Value
    name: kafka_cluster_$1_$2
    labels:
      topic: "$3"
      partition: "$4"
  - pattern: kafka.log<type=Log, name=(.+), topic=(.+), partition=(.+)><>Value
    name: kafka_log_$1
    labels:
      topic: "$2"
      partition: "$3"
  - pattern: kafka.controller<type=(.+), name=(.+)><>(Count|Value)
    name: kafka_controller_$1_$2
{% if 'prod' in groups or 'LoadRelease' in groups %}
  - pattern: kafka.network<type=(.+), name=(.+)><>Value
    name: kafka_network_$1_$2
  - pattern: kafka.network<type=(.+), name=(.+)PerSec, request=(.+), (\w+)=(.+)><>Count
    name: kafka_network_$1_$2_total
    labels:
      request: "$3"
      "$4": "$5"
  - pattern: kafka.network<type=(.+), name=(.+)PerSec, request=(.+)><>Count
    name: kafka_network_$1_$2_total
    labels:
      request: "$3"
  - pattern: kafka.network<type=(.+), name=(\w+), networkProcessor=(.+)><>Count
    name: kafka_network_$1_$2
    labels:
      request: "$3"
    type: COUNTER
  - pattern: kafka.network<type=(.+), name=(\w+), request=(\w+)><>Count
    name: kafka_network_$1_$2
    labels:
      request: "$3"
  - pattern: kafka.network<type=(.+), name=(\w+)><>Count
    name: kafka_network_$1_$2
  - pattern: kafka.server<type=(.+), name=(.+)PerSec\w*, topic=(.+), partition=(.*)><>Count
    name: kafka_server_$1_$2_total
    labels:
      topic: "$3"
      partition: "$4"
  - pattern: kafka.server<type=(.+), name=(.+)PerSec\w*, topic=(.+)><>Count
    name: kafka_server_$1_$2_total
    labels:
      topic: "$3"
{% endif %}
  - pattern: kafka.server<type=(.+), name=(.+)PerSec\w*><>Count
    name: kafka_server_$1_$2_total
    type: COUNTER
  - pattern: kafka.server<type=(.+), name=(.+), clientId=(.+), topic=(.+), partition=(.*)><>(Count|Value)
    name: kafka_server_$1_$2
    labels:
      clientId: "$3"
      topic: "$4"
      partition: "$5"
  - pattern: kafka.server<type=(.+), name=(.+), topic=(.+), partition=(.*)><>(Count|Value)
    name: kafka_server_$1_$2
    labels:
      topic: "$3"
      partition: "$4"
  - pattern: kafka.server<type=(.+), name=(.+), topic=(.+)><>(Count|Value)
    name: kafka_server_$1_$2
    labels:
      topic: "$3"
    type: COUNTER
  - pattern: kafka.server<type=(.+), name=(.+), clientId=(.+), brokerHost=(.+), brokerPort=(.+)><>(Count|Value)
    name: kafka_server_$1_$2
    labels:
      clientId: "$3"
      broker: "$4:$5"
  - pattern: kafka.server<type=(.+), name=(.+), clientId=(.+)><>(Count|Value)
    name: kafka_server_$1_$2
    labels:
      clientId: "$3"
  - pattern: kafka.server<type=(.+), name=(.+)><>(Count|Value)
    name: kafka_server_$1_$2

  - pattern: kafka.(\w+)<type=(.+), name=(.+)PerSec\w*><>Count
    name: kafka_$1_$2_$3_total
  - pattern: kafka.(\w+)<type=(.+), name=(.+)PerSec\w*, topic=(.+)><>Count
    name: kafka_$1_$2_$3_total
    labels:
      topic: "$4"
    type: COUNTER
  - pattern: kafka.(\w+)<type=(.+), name=(.+)PerSec\w*, topic=(.+), partition=(.+)><>Count
    name: kafka_$1_$2_$3_total
    labels:
      topic: "$4"
      partition: "$5"
    type: COUNTER
  - pattern: kafka.(\w+)<type=(.+), name=(.+)><>(Count|Value)
    name: kafka_$1_$2_$3_$4
    type: COUNTER
  - pattern: kafka.(\w+)<type=(.+), name=(.+), (\w+)=(.+)><>(Count|Value)
    name: kafka_$1_$2_$3_$6
    labels:
      "$4": "$5"
  # Special cases and very specific rules
  - pattern: kafka.server<type=(.+), name=(.+), clientId=(.+), topic=(.+), partition=(.*)><>Value
    name: kafka_server_$1_$2
    type: GAUGE
    labels:
      clientId: "$3"
      topic: "$4"
      partition: "$5"
  - pattern: kafka.server<type=(.+), name=(.+), clientId=(.+), brokerHost=(.+), brokerPort=(.+)><>Value
    name: kafka_server_$1_$2
    type: GAUGE
    labels:
      clientId: "$3"
      broker: "$4:$5"
{% if 'prod' in groups or 'LoadRelease' in groups %}
  # Generic per-second counters with 0-2 key/value pairs
  - pattern: kafka.(\w+)<type=(.+), name=(.+)PerSec\w*, (.+)=(.+), (.+)=(.+)><>Count
    name: kafka_$1_$2_$3_total
    type: COUNTER
    labels:
      "$4": "$5"
      "$6": "$7"
  - pattern: kafka.(\w+)<type=(.+), name=(.+)PerSec\w*, (.+)=(.+)><>Count
    name: kafka_$1_$2_$3_total
    type: COUNTER
    labels:
      "$4": "$5"
  - pattern: kafka.(\w+)<type=(.+), name=(.+)PerSec\w*><>Count
    name: kafka_$1_$2_$3_total
    type: COUNTER

  # Generic gauges with 0-2 key/value pairs
  - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+), (.+)=(.+)><>Value
    name: kafka_$1_$2_$3
    type: GAUGE
    labels:
      "$4": "$5"
      "$6": "$7"
  - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+)><>Value
    name: kafka_$1_$2_$3
    type: GAUGE
    labels:
      "$4": "$5"
  - pattern: kafka.(\w+)<type=(.+), name=(.+)><>Value
    name: kafka_$1_$2_$3
    type: GAUGE

  # Emulate Prometheus 'Summary' metrics for the exported 'Histogram's.
  #
  # Note that these are missing the '_sum' metric!
  - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+), (.+)=(.+)><>Count
    name: kafka_$1_$2_$3_count
    type: COUNTER
    labels:
      "$4": "$5"
      "$6": "$7"
  - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.*), (.+)=(.+)><>(\d+)thPercentile
    name: kafka_$1_$2_$3
    type: GAUGE
    labels:
      "$4": "$5"
      "$6": "$7"
      quantile: "0.$8"
  - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+)><>Count
    name: kafka_$1_$2_$3_count
    type: COUNTER
    labels:
      "$4": "$5"
  - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.*)><>(\d+)thPercentile
    name: kafka_$1_$2_$3
    type: GAUGE
    labels:
      "$4": "$5"
      quantile: "0.$6"
  - pattern: kafka.(\w+)<type=(.+), name=(.+)><>Count
    name: kafka_$1_$2_$3_count
    type: COUNTER
  - pattern: kafka.(\w+)<type=(.+), name=(.+)><>(\d+)thPercentile
    name: kafka_$1_$2_$3
    type: GAUGE
    labels:
      quantile: "0.$4"
{% endif %}